////////////////////////////////////////////////////////////////////////////////
//
//  TYPHOON FRAMEWORK
//  Copyright 2013, Typhoon Framework Contributors
//  All Rights Reserved.
//
//  NOTICE: The authors permit you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////

#import "TyphoonDefinition.h"

@protocol TyphoonPropertyInjection;


typedef void(^TyphoonInjectionsEnumerationBlock)(id injection, id*injectionToReplace, BOOL*stop);

typedef NS_OPTIONS(NSInteger, TyphoonInjectionsEnumerationOption) {
    TyphoonInjectionsEnumerationOptionProperties = 1 << 0,
    TyphoonInjectionsEnumerationOptionMethods = 1 << 2,
    TyphoonInjectionsEnumerationOptionAll = TyphoonInjectionsEnumerationOptionProperties | TyphoonInjectionsEnumerationOptionMethods,
};


/**
 * Declares definition methods & properties that may be useful for building infrastructure components.
 */
@interface TyphoonDefinition (Infrastructure)

/**
 * The key of the component. A key is useful when multiple configuration of the same class or protocol are desired - for example
 * MasterCardPaymentClient and VisaPaymentClient.
 *
 * If using the TyphoonBlockComponentFactory style of assembly, the key is automatically generated based on the selector name of the
 * component, thus avoiding "magic strings" and providing better integration with IDE refactoring tools.
 */
@property (nonatomic) NSString *key;

/**
 * Describes the initializer, ie the selector and arguments that will be used to instantiate this component.
 *
 * An initializer can be an instance method, a class method, or even a reference to another component's method (see factory property).
 *
 * If no explicit initializer has been set, returns a default initializer representing the init method.
 *
 * @see factory
 */
@property (nonatomic, readonly) TyphoonMethod *initializer;

/**
 * Returns true if this is a default initializer generated by Typhoon. A manually specified initializer will return false, even if the
 * selector is @selector(init)
 */
@property (nonatomic, getter = isInitializerGenerated) BOOL initializerGenerated;


- (BOOL)isCandidateForInjectedClass:(Class)clazz includeSubclasses:(BOOL)includeSubclasses;

- (BOOL)isCandidateForInjectedProtocol:(Protocol *)aProtocol;

- (TyphoonMethod *)beforeInjections;

- (NSSet *)injectedProperties;

- (NSOrderedSet *)injectedMethods;

- (TyphoonMethod *)afterInjections;

- (BOOL)hasRuntimeArgumentInjections;

- (void)addInjectedProperty:(id <TyphoonPropertyInjection>)property;

- (void)addInjectedPropertyIfNotExists:(id <TyphoonPropertyInjection>)property;

- (void)enumerateInjectionsOfKind:(Class)injectionClass options:(TyphoonInjectionsEnumerationOption)options
                       usingBlock:(TyphoonInjectionsEnumerationBlock)block;

@end


@interface TyphoonDefinition ()

- (instancetype)initWithClass:(Class)clazz key:(NSString *)key;

+ (instancetype)withClass:(Class)clazz key:(NSString *)key;

@end


@interface TyphoonDefinition (Config)

/**
 * Factory method for a TyphoonConfigPostProcessor. Don't use it in test targets!
 * @param fileName The config filename to load. File should be placed in main bundle
 * @return a definition.
 */
+ (instancetype)withConfigName:(NSString *)fileName;

/**
 * Factory method for a TyphoonConfigPostProcessor.
 * @param fileName    The config filename to load.
 * @param fileBundle  The bundle, where the config file is placed
 * @return a definition.
 */
+ (instancetype)withConfigName:(NSString *)fileName bundle:(NSBundle *)fileBundle;

/**
 * Factory method for a TyphoonConfigPostProcessor.
 * @param filePath The path to config file to load.
 * @return a definition.
 */
+ (instancetype)withConfigPath:(NSString *)filePath;

#pragma mark - Deprecated methods

+ (instancetype)configDefinitionWithName:(NSString *)fileName DEPRECATED_MSG_ATTRIBUTE("use -withConfigName: instead");
+ (instancetype)configDefinitionWithName:(NSString *)fileName bundle:(NSBundle *)fileBundle DEPRECATED_MSG_ATTRIBUTE("use -withConfigName:bundle: instead");
+ (instancetype)configDefinitionWithPath:(NSString *)filePath DEPRECATED_MSG_ATTRIBUTE("use -withConfigPath: instead");

@end
