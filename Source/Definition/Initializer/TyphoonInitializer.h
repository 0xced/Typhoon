////////////////////////////////////////////////////////////////////////////////
//
//  TYPHOON FRAMEWORK
//  Copyright 2013, Jasper Blues & Contributors
//  All Rights Reserved.
//
//  NOTICE: The authors permit you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////


#import <Foundation/Foundation.h>
#import "TyphoonInjections.h"

@class TyphoonDefinition;
@class TyphoonParameterInjectedAsCollection;

typedef enum
{
    TyphoonComponentInitializerIsClassMethodGuess,
    TyphoonComponentInitializerIsClassMethodYes,
    TyphoonComponentInitializerIsClassMethodNo
} TyphoonComponentInitializerIsClassMethod;

/**
* @ingroup Definition
*
* Represents an initializer for a component.
*
* ##Initializer style injection has the following advantages:
*
* - Presents a clear contract to put the instance in the required state before use.
* - No custom lifecycle methods (before/after property injection) are required.
*
* ##Initializer injection has the following drawbacks:
*
* - Not suitable for classes with a very large number of dependencies - a very large initializer method will create poor readability.
* - Auto-injection by type is not supported.
* - No type introspection for objects injected with a text representation.
*
* Its generally recommended to use initializer-style injection, unless the above drawbacks will manifest.
*
*/
@interface TyphoonInitializer : NSObject <NSCopying>
{
    NSMutableArray *_injectedParameters;
    NSArray *_parameterNames;
    __unsafe_unretained TyphoonDefinition *_definition;
    TyphoonComponentInitializerIsClassMethod _isClassMethodStrategy;
    SEL _selector;
}

/**
* The selector used to initialize the component.
*/
@property(nonatomic) SEL selector;

@property(nonatomic, readonly) NSArray *parameterNames;

/**
* Returns true if this is a default initializer generated by Typhoon. A manually specified initializer will return false, even if the
* selector is @selector(init)
*/
@property(nonatomic) BOOL generated;

- (id)initWithSelector:(SEL)initializer;

- (id)initWithSelector:(SEL)initializer isClassMethodStrategy:(TyphoonComponentInitializerIsClassMethod)isClassMethod;

- (TyphoonDefinition *)definition;

- (NSArray *)injectedParameters;

/* ====================================================================================================================================== */
#pragma mark - inject


- (void)injectParameterWith:(id)injection;

- (void)injectParameter:(NSString *)parameterName with:(id)injection;


@end
